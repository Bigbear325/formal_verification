(******************************************************************)

free c: channel.

(* Hash *)
fun H(bitstring): bitstring.

(* Control Plane Hash *)
fun SHA256(bitstring): bitstring.

(* Signature *)
fun sign(bitstring, bitstring): bitstring.
fun pk(bitstring): bitstring.
 
reduc forall x: bitstring, sk: bitstring; verify(sign(x, sk), x, pk(sk)) = true.

(* Host Information *)
free HostInfoC, HostInfoS, HostInfoISP, HostInfoSA, HostInfoCA: bitstring.

(* CP certificate *)
free HostInfoCP:bitstring [private].
free HostInfoC, HostinfoS, HostInfoCA: bitstring.



(******************************************************************)
(* Hash *)(*new added*)
fun H(bitstring): bitstring.

(* HMAC *)
reduc forall key: bitstring, text: bitstring;
HMAC(key, text) = H(( (key, hmac_opad), H(((key, hmac_ipad), text)) )).

(* HKDF *)
reduc forall salt: bitstring, IKM: bitstring;
HKDF_Extract(salt, IKM) = H(( (salt, hmac_opad), H(((salt, hmac_ipad), IKM)) )). (* HKDF-extract *)

reduc forall PRK: bitstring, info: bitstring, L: bitstring;
HKDF_Expand(PRK, info, L) = H(( (PRK, hmac_opad), H(((PRK, hmac_ipad), (info, L))) )). (* HKDF-expand *)

(* Signature *)
fun sign(bitstring, bitstring): bitstring.
fun pk(bitstring): bitstring.
reduc forall x: bitstring, sk: bitstring; verify(sign(x, sk), x, pk(sk)) = true.

(* Diffie-Hellman *)
const g: bitstring.
fun exp(bitstring, bitstring): bitstring. (* exp(g,x) = g^x *)
equation forall x: bitstring, y: bitstring; exp(exp(g, x), y) = exp(exp(g, y), x). (* (g^x)^y = (g^y)^x *)

(* XOR *)
const zeros: bitstring. (* 00..0 *)
fun xor(bitstring,bitstring):bitstring.
equation forall x:bitstring,y:bitstring; xor(xor(x,y),y) = x.
equation forall x:bitstring; xor(x,x) = zeros.  (* xor(x,x) = 00..0 *)
equation forall x:bitstring; xor(zeros,x) = x.  (* xor(00..0,x) = x *)
equation forall x:bitstring; xor(x,zeros) = x.  (* xor(x,00..0) = x *)

(* AEAD: Authenticated Encryption with Associated Data *)
(* Encryption scheme *)
fun encrypt(bitstring, bitstring, bitstring): bitstring.
reduc forall x:bitstring, k:bitstring, r:bitstring; decrypt(encrypt(x,k,r),k,r) = x.
(* MAC *)
fun mac(bitstring, bitstring): bitstring.
reduc forall x: bitstring, k: bitstring; verify_mac(mac(x, k), x, k) = true.
(* Encrypt-then-MAC (generic composition)[R02] *)
(* [R02] P.Rogaway, "Authenticated-encryption with associated-data,"
ACM Conference on Computer and Communications Security (CCS'02),
pp.98-107, ACM press, 2002 *)
reduc forall k: bitstring, n: bitstring, p:bitstring, ad:bitstring;
AEAD_Encrypt(k, n, p, ad) = (encrypt(p, k, n), mac((n, ad, encrypt(p, k, n)), k)).
reduc forall k: bitstring, n: bitstring, p:bitstring, ad:bitstring;
AEAD_Decrypt(k, n, (encrypt(p, k, n), mac((n, ad, encrypt(p, k, n)), k)), ad) = p.

(* increment function *)
fun inc(bitstring): bitstring.


(******************************************************************)
(* Queries: secrecy *) 

(* Queries: authentication *) 

(******************************************************************)
(* Certificate Authority (CA) process *)

let processCA(skCA: bitstring) =
     
    in(c, (HostInfoX: bitstring, pkX: bitstring));
     
    if HostInfoX <> HostInfoC && 
       HostInfoX <> HostInfoS &&
       HostInfoX <> HostInfoCA then 
    let signCA_pkX = sign(H((HostInfoCA, HostInfoX, pkX)), skCA) in 
    let X_certificate = (HostInfoCA, HostInfoX, pkX, signCA_pkX) in
    out(c, X_certificate);
	
	let certificate_of_ISP_Assistant = (HostInfoCA, HostInfoISP, pkX, signCA_pkX) in
	let certificate_of_Server_Agent = (HostInfoCA, HostInfoSA, pkX, signCA_pkX) in
	out(c, certificate_of_ISP_Assistant);
	out(c, certificate_of_Server_Agent);

	

	0.
(******************************************************************)
(* ISP Assistant process *)

(******************************)
(* OutLine                    *)
(* ZFree Setup Phase          *)
(* 0 TLS Setup                *)
(* 1 Handshake                *)
(* 2 Connection Establishment *)
(******************************)

let processISPAssistant() = 

    (* in(c, certificate_of_Assistant: bitstring);*)

    (* isp_client init *)

    in(c, (tls_isp_version: bitstring, tls_isp_cipher_suites: bitstring,
            legacy_compression_methods: bitstring));

    (******************************)

	(* Step 0 * tls_isp hello + key_share)
	(*  new TLS_Hello: bitstring;  *)

    new tls_isp_random:bitstring;
    new X: bitstring;
    let tls_isp_key_shares = exp(g ^ X) in (* g^X *)
    let tls_isp_hello = (tls_isp_version, tls_isp_random, tls_isp_cipher_suites, tls_isp_key_shares) in

    (* tls_isp hello out*)
    out(c, tls_isp_hello);

    (******************************)


    (* tls_isp in *)
	in(c, Server_Agent_Handshake_Response: bitstring);
	let (Get_TLS_Hello: bitstring, Server_Agent_Certificate: bitstring) = Server_Agent_Handshake_Response in

	(* Step 1 *)
	new Policy: bitstring;
	new OptionListLength: bitstring;
	new OptionList: bitstring;

	let ZFree_HELLO_ISP = (Policy, OptionListLength, OptionList) in 
	out(c, ZFree_HELLO_ISP);

	in(c, ZFree_HELLO_Server_Agent: bitstring);

	(* Step 2 *)
	new HashType: bitstring;
	new ParseType: bitstring;
	new connectionType: bitstring;
	new Policy2: bitstring;
	new AddressListLength: bitstring;
	new AddressList: bitstring;

	let ZFree_CONNECT = (HashType, ParseType, connectionType, Policy2, AddressListLength,  AddressList) in 
	out(c, ZFree_CONNECT);

	(* Step 4 *)
	in(c, ResponseData: bitstring);
	out(c, ResponseData);

	in(c, ZFree_HASHPUSH: bitstring);
	(* do some control plane match *)

	(* Step 5 *)
	new TimeStamp: bitstring;
	let ZFree_HASHPULL = TimeStamp in
	out(c, ZFree_HASHPULL);

	(* Step 6 *)
	new StatusCode: bitstring;
	new UnmatchedHashListLength: bitstring;
	new HashValue: bitstring;
	let ZFree_STATUS = (StatusCode, UnmatchedHashListLength, HashValue) in 
	out(c, ZFree_STATUS);

	0.
(******************************************************************)
(* Server Agent process *)

let processServerAgent() = 

    (* Setup *)
    in(c, (tls_sa_version: bitstring, tls_sa_cipher_suites: bitstring));

    (* tls_sa input *)
    in(c, tls_isp_hello: bitstring);

	(* Step 0 *)
    (* in(c, certificate_of_Server_Agent: bitstring); *)
    (* in(c, tls_isp_hello: bitstring); *)

    let (tls_isp_version: bitstring, tls_isp_random: bitstring,
            tls_isp_cipher_suites: bitstring, tls_isp_key_shares) = tls_isp_hello in

    if tls_isp_version = tls_sa_version &&
        tls_isp_cipher_suites = tls_sa_cipher_suites then

    (* sa hello + key share*)

    new sa_random: bitstring
    new Y: bitstring;
    let tls_sa_key_share = exp(g, Y) in (* g^Y *)
    let tls_sa_hello = (tls_sa_version, sa_random, tls_sa_cipher_suites, tls_sa_key_share) in



    (******************************)
    (* SS, ES, xSS, xES *) (* Full handshake: SS = ES *)
    let static_secret = exp(client_key_shares, Y) in     (* SS: (g^{X})^Y = g^{XY} *)
    let ephemeral_secret = exp(client_key_shares, Y) in  (* ES: (g^{X})^Y = g^{XY} *)
    let xss = HKDF_Extract(hkdf_zeros, static_secret) in
    let xes = HKDF_Extract(hkdf_zeros, ephemeral_secret) in

    â‰ˆ

    (* Handshake traffic keys: client_write_key, server_write_key, client_write_iv, server_write_iv *)
    
    let handshake_context = H((tls_tls_hello, tls_sa_hello)) in

    let handshake_client_write_key = HKDF_Expand(xes, ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_KEY), handshake_context), hkdf_length_handshake_client_write_key) in

    let handshake_server_write_key = HKDF_Expand(xes, ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_KEY), handshake_context), hkdf_length_handshake_server_write_key) in

    let handshake_client_write_iv = HKDF_Expand(xes, ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_CLIENT_WRITE_IV), handshake_context), hkdf_length_handshake_client_write_IV) in

    let handshake_server_write_iv = HKDF_Expand(xes, ((HKDF_LABEL_HANDSHAKE_KEY_EXPANSION, HKDF_LABEL_SERVER_WRITE_IV), handshake_context), hkdf_length_handshake_server_write_IV) in

    (* where part of ZFree will be!!!!!!!!!!*)
    (* ServerConfiguration: optional *) 
    new configuration_id: bitstring;
    new expiration_date: bitstring;
    let static_key_share = server_key_share in 
    let server_configuration = (configuration_id, expiration_date, static_key_share, 
    early_data_type) in 



(******************************)(******************************)(******************************)
    (* tls_sa_server_hello out*)
	out(c, Server_Agent_Handshake_Response);

	(* Step 1 *)
	in(c, ZFree_HELLO_ISP: bitstring);
	new ZFree_HELLO_Server_Agent: bitstring;
	out(c, ZFree_HELLO_Server_Agent);

	(* Step 2 *)
	in(c, ZFree_CONNECT: bitstring);
	new ZFree_ACK: bitstring;
	out(c, ZFree_ACK);

	(* Step 4 *)
	in(c, ResponseData: bitstring);
	let hashed_response_data = SHA256(ResponseData) in
	out(c, ResponseData);

	new HashValueLength: bitstring;
	new HashValue: bitstring;
	new TimeStamp: bitstring;
	let ZFree_HASHPUSH = (HashValueLength, HashValue, TimeStamp, ResponseData) in 
	out(c, ZFree_HASHPUSH);

	(* Step 5 *)
	in(c, ZFree_HASHPULL: bitstring);

	(* Step 6 *)
	in(c, ZFree_STATUS: bitstring);

	0.

(******************************************************************)
(* Server process *)

let processServer() = 
	
	(* Step 4 *)
	new ResponseData: bitstring;
	out(c, ResponseData);
	
	0.

(******************************************************************)
(* Client process *)

let processClient() = 
	
	(* Step 4 *)
	in(c, ResponseData: bitstring);

	0.

(******************************************************************)
(* Main process *)

process
    (* Certificate Authority (CA) : skCA, pkCA *)
      new skCA: bitstring;
      let pkCA = pk(skCA) in
      out(c, pkCA);
    

    ((!processServerAgent()) |
     (!processISPAssistant()) |
     (!processServer()) |
     (!processClient()) |
     (!processCA(skCA))
    )


(******************************************************************)
(* end of file *)


